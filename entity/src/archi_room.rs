//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.8

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "archi_room")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub password: bool,
    pub hint_cost: i32,
    pub location_check_points: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::archi_player::Entity")]
    ArchiPlayer,
    #[sea_orm(has_many = "super::archi_slot::Entity")]
    ArchiSlot,
    #[sea_orm(has_many = "super::hint::Entity")]
    Hint,
    #[sea_orm(has_many = "super::rando_game::Entity")]
    RandoGame,
}

impl Related<super::archi_player::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ArchiPlayer.def()
    }
}

impl Related<super::archi_slot::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ArchiSlot.def()
    }
}

impl Related<super::hint::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Hint.def()
    }
}

impl Related<super::rando_game::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RandoGame.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
