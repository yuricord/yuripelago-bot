//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.8

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "archi_slot")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub global_id: i32,
    pub id: i32,
    pub name: String,
    pub game: String,
    pub r#type: i32,
    pub group_members: Option<Json>,
    pub room_id: String,
    pub deaths: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::archi_room::Entity",
        from = "Column::RoomId",
        to = "super::archi_room::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    ArchiRoom,
    #[sea_orm(has_many = "super::discord_slot_link::Entity")]
    DiscordSlotLink,
    #[sea_orm(
        belongs_to = "super::game_data_package::Entity",
        from = "Column::Game",
        to = "super::game_data_package::Column::Name",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    GameDataPackage,
}

impl Related<super::archi_room::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ArchiRoom.def()
    }
}

impl Related<super::discord_slot_link::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::DiscordSlotLink.def()
    }
}

impl Related<super::game_data_package::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GameDataPackage.def()
    }
}

impl Related<super::discord_user::Entity> for Entity {
    fn to() -> RelationDef {
        super::discord_slot_link::Relation::DiscordUser.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::discord_slot_link::Relation::ArchiSlot.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
